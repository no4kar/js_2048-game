{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","gameScore","querySelector","gameCells","querySelectorAll","btnStart","msgWin","msgLose","rows","cols","crntScore","gameBoard","Array","from","length","prevGameBoard","flat","emptyCells","arrowHandler","evt","preventDefault","key","moveCol","moveRow","toString","addTile","drawBoard","verifyWinLose","includes","classList","remove","add","textContent","removeEventListener","forEach","cell","indx","cellVal","Math","floor","className","cunt","verifyEmptyCells","i","arrLen","row","col","push","randIndx","randInt","randRow","randCol","random","splice","to","Number","MAX_SAFE_INTEGER","direction","cellsVals","reverse","cellMerge","concat","el","arr"],"mappings":"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","file":"main.fb71b3aa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gameScore = document.querySelector('.game-score');\n  const gameCells = document.querySelectorAll('.field-cell');\n  const btnStart = document.querySelector('.button.start');\n  const msgWin = document.querySelector('.message-win');\n  const msgLose = document.querySelector('.message-lose');\n  const rows = 4;\n  const cols = rows;\n  let crntScore = 0;\n  const gameBoard = Array.from({ length: rows },\n    () => Array.from({ length: cols }, () => null));\n  let prevGameBoard = gameBoard.flat();\n  const emptyCells = [];\n\n  btnStart.addEventListener('click', () => {\n    for (const boardRow of gameBoard) {\n      boardRow.forEach((el, i, arr) => {\n        arr[i] = null;\n      });\n    }\n    addTile(2);\n    drawBoard();\n\n    document.addEventListener('keydown', arrowHandler);\n\n    btnStart.classList.remove('start');\n    btnStart.classList.add('restart');\n    btnStart.textContent = 'Restart';\n\n    crntScore = 0;\n    gameScore.textContent = crntScore;\n\n    document.querySelector('.message-start').classList.add('hidden');\n    msgWin.classList.add('hidden');\n    msgLose.classList.add('hidden');\n  });\n\n  function arrowHandler(evt) {\n    evt.preventDefault();\n\n    switch (evt.key) {\n      case 'ArrowUp':\n        moveCol('up');\n        break;\n\n      case 'ArrowDown':\n        moveCol('down');\n        break;\n\n      case 'ArrowLeft':\n        moveRow('left');\n        break;\n\n      case 'ArrowRight':\n        moveRow('right');\n        break;\n\n      default:\n        return;\n    }\n\n    if (isNeedAdd()) {\n      addTile();\n    }\n\n    drawBoard();\n    verifyWinLose();\n    prevGameBoard = gameBoard.flat();\n  }\n\n  function verifyWinLose() {\n    if (gameBoard.flat().includes(2048)) {\n      btnStart.classList.remove('restart');\n      btnStart.classList.add('start');\n      btnStart.textContent = 'Start';\n\n      msgWin.classList.remove('hidden');\n      document.querySelector('.message-start').classList.remove('hidden');\n      document.removeEventListener('keydown', arrowHandler);\n\n      return;\n    }\n\n    if (emptyCells.length === 0) {\n      msgLose.classList.remove('hidden');\n      document.removeEventListener('keydown', arrowHandler);\n    }\n  }\n\n  function drawBoard() {\n    gameCells.forEach((cell, indx) => {\n      const cellVal = gameBoard[Math.floor(indx / cols)][indx % cols];\n\n      cell.textContent = cellVal || '';\n      cell.className = 'field-cell';// clear from prev condition\n\n      if (cellVal) {\n        cell.classList.add(`field-cell--${cellVal}`);\n      }\n    });\n\n    gameScore.textContent = crntScore;\n  }\n\n  function verifyEmptyCells() {\n    emptyCells.length = 0;\n\n    for (let i = 0, arrLen = rows * cols; i < arrLen; i++) {\n      const row = Math.floor(i / cols);\n      const col = i % cols;\n\n      if (!gameBoard[row][col]) {\n        emptyCells.push([row, col]);\n      }\n    }\n  }\n\n  function addTile(cunt = 1) {\n    verifyEmptyCells();\n\n    for (let i = 0; i < cunt && emptyCells.length !== 0; i++) {\n      const randIndx = randInt(emptyCells.length - 1);\n      const [randRow, randCol] = emptyCells[randIndx];\n\n      gameBoard[randRow][randCol] = (Math.random() < 0.9) ? 2 : 4;\n      emptyCells.splice(randIndx, 1);\n    }\n  }\n\n  function isNeedAdd() {\n    const result = prevGameBoard.toString() !== gameBoard.flat().toString();\n\n    return result;\n  }\n\n  function randInt(to = Number.MAX_SAFE_INTEGER, from = 0) {\n    if (to < from) {\n      return randInt(from, to);\n    }\n\n    return Math.floor(Math.random() * (to - from)) + from;\n  }\n\n  function moveRow(direction = 'right') {\n    let cellsVals = [];\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        if (gameBoard[row][col]) {\n          cellsVals.push(gameBoard[row][col]);\n        }\n      }\n\n      if (direction === 'left') {\n        cellsVals.reverse();\n      }\n\n      cellsVals = cellMerge(cellsVals);\n\n      if (direction === 'left') {\n        cellsVals.reverse();\n      }\n\n      for (let col = 0; col < cols; col++) {\n        gameBoard[row][col] = cellsVals[col];\n      }\n\n      cellsVals.length = 0;\n    }\n  }\n\n  function moveCol(direction = 'down') {\n    let cellsVals = [];\n\n    for (let col = 0; col < cols; col++) {\n      for (let row = 0; row < rows; row++) {\n        if (gameBoard[row][col]) {\n          cellsVals.push(gameBoard[row][col]);\n        }\n      }\n\n      if (direction === 'up') {\n        cellsVals.reverse();\n      }\n\n      cellsVals\n        = cellMerge(cellsVals);\n\n      if (direction === 'up') {\n        cellsVals.reverse();\n      }\n\n      for (let row = 0; row < rows; row++) {\n        gameBoard[row][col] = cellsVals[row];\n      }\n\n      cellsVals.length = 0;\n    }\n  }\n\n  function cellMerge(cellsVals = []) {\n    for (let i = 1; i < cellsVals.length; i++) {\n      if (cellsVals[i - 1] === cellsVals[i]) {\n        cellsVals[i - 1] += cellsVals[i];\n        cellsVals.splice(i, 1);\n        crntScore += cellsVals[i - 1];\n        break;\n      }\n    }\n\n    return Array.from({ length: (rows - cellsVals.length) }, () => null)\n      .concat(cellsVals);\n  }\n});\n"]}